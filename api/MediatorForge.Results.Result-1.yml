### YamlMime:ManagedReference
items:
- uid: MediatorForge.Results.Result`1
  commentId: T:MediatorForge.Results.Result`1
  id: Result`1
  parent: MediatorForge.Results
  children:
  - MediatorForge.Results.Result`1.#ctor(`0)
  - MediatorForge.Results.Result`1.#ctor(Exception)
  - MediatorForge.Results.Result`1.CompareTo(MediatorForge.Results.Result{`0})
  - MediatorForge.Results.Result`1.Equals(MediatorForge.Results.Result{`0})
  - MediatorForge.Results.Result`1.Equals(System.Object)
  - MediatorForge.Results.Result`1.Exception
  - MediatorForge.Results.Result`1.Fail(Exception)
  - MediatorForge.Results.Result`1.GetHashCode
  - MediatorForge.Results.Result`1.IsSuccess
  - MediatorForge.Results.Result`1.Match(Action{`0},Action{Exception})
  - MediatorForge.Results.Result`1.Match``1(Func{`0,``0},Func{Exception,``0})
  - MediatorForge.Results.Result`1.OnFailure(Action{Exception})
  - MediatorForge.Results.Result`1.OnSuccess(Action{`0})
  - MediatorForge.Results.Result`1.op_Equality(MediatorForge.Results.Result{`0},MediatorForge.Results.Result{`0})
  - MediatorForge.Results.Result`1.op_GreaterThan(MediatorForge.Results.Result{`0},MediatorForge.Results.Result{`0})
  - MediatorForge.Results.Result`1.op_GreaterThanOrEqual(MediatorForge.Results.Result{`0},MediatorForge.Results.Result{`0})
  - MediatorForge.Results.Result`1.op_Implicit(`0)~MediatorForge.Results.Result{`0}
  - MediatorForge.Results.Result`1.op_Implicit(Exception)~MediatorForge.Results.Result{`0}
  - MediatorForge.Results.Result`1.op_Inequality(MediatorForge.Results.Result{`0},MediatorForge.Results.Result{`0})
  - MediatorForge.Results.Result`1.op_LessThan(MediatorForge.Results.Result{`0},MediatorForge.Results.Result{`0})
  - MediatorForge.Results.Result`1.op_LessThanOrEqual(MediatorForge.Results.Result{`0},MediatorForge.Results.Result{`0})
  - MediatorForge.Results.Result`1.Succ(`0)
  - MediatorForge.Results.Result`1.Value
  langs:
  - csharp
  - vb
  name: Result<T>
  nameWithType: Result<T>
  fullName: MediatorForge.Results.Result<T>
  type: Struct
  source:
    remote:
      path: src/MediatorForge/Results/Result.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: Result
    path: src/MediatorForge/Results/Result.cs
    startLine: 6
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nRepresents the result of an operation that can succeed or fail.\n"
  example: []
  syntax:
    content: public readonly struct Result<T>
    typeParameters:
    - id: T
      description: The type of the value.
    content.vb: Public Structure Result(Of T)
  implements:
  - IEquatable{MediatorForge.Results.Result{{T}}}
  - IComparable{MediatorForge.Results.Result{{T}}}
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType.vb: Result(Of T)
  modifiers.csharp:
  - public
  - readonly
  - struct
  modifiers.vb:
  - Public
  - Structure
  fullName.vb: MediatorForge.Results.Result(Of T)
  name.vb: Result(Of T)
- uid: MediatorForge.Results.Result`1.IsSuccess
  commentId: P:MediatorForge.Results.Result`1.IsSuccess
  id: IsSuccess
  parent: MediatorForge.Results.Result`1
  langs:
  - csharp
  - vb
  name: IsSuccess
  nameWithType: Result<T>.IsSuccess
  fullName: MediatorForge.Results.Result<T>.IsSuccess
  type: Property
  source:
    remote:
      path: src/MediatorForge/Results/Result.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: IsSuccess
    path: src/MediatorForge/Results/Result.cs
    startLine: 15
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nGets a value indicating whether the result is successful.\n"
  example: []
  syntax:
    content: public readonly bool IsSuccess { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsSuccess As Boolean
  overload: MediatorForge.Results.Result`1.IsSuccess*
  nameWithType.vb: Result(Of T).IsSuccess
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: MediatorForge.Results.Result(Of T).IsSuccess
- uid: MediatorForge.Results.Result`1.Value
  commentId: P:MediatorForge.Results.Result`1.Value
  id: Value
  parent: MediatorForge.Results.Result`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: Result<T>.Value
  fullName: MediatorForge.Results.Result<T>.Value
  type: Property
  source:
    remote:
      path: src/MediatorForge/Results/Result.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: Value
    path: src/MediatorForge/Results/Result.cs
    startLine: 20
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nGets the value of the result if it is successful.\n"
  example: []
  syntax:
    content: public readonly T Value { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public ReadOnly Property Value As T
  overload: MediatorForge.Results.Result`1.Value*
  nameWithType.vb: Result(Of T).Value
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: MediatorForge.Results.Result(Of T).Value
- uid: MediatorForge.Results.Result`1.Exception
  commentId: P:MediatorForge.Results.Result`1.Exception
  id: Exception
  parent: MediatorForge.Results.Result`1
  langs:
  - csharp
  - vb
  name: Exception
  nameWithType: Result<T>.Exception
  fullName: MediatorForge.Results.Result<T>.Exception
  type: Property
  source:
    remote:
      path: src/MediatorForge/Results/Result.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: Exception
    path: src/MediatorForge/Results/Result.cs
    startLine: 25
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nGets the exception of the result if it is a failure.\n"
  example: []
  syntax:
    content: public readonly Exception? Exception { get; }
    parameters: []
    return:
      type: System.Nullable{Exception}
    content.vb: Public ReadOnly Property Exception As Exception?
  overload: MediatorForge.Results.Result`1.Exception*
  nameWithType.vb: Result(Of T).Exception
  modifiers.csharp:
  - public
  - readonly
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: MediatorForge.Results.Result(Of T).Exception
- uid: MediatorForge.Results.Result`1.#ctor(`0)
  commentId: M:MediatorForge.Results.Result`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: MediatorForge.Results.Result`1
  langs:
  - csharp
  - vb
  name: Result(T)
  nameWithType: Result<T>.Result(T)
  fullName: MediatorForge.Results.Result<T>.Result(T)
  type: Constructor
  source:
    remote:
      path: src/MediatorForge/Results/Result.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: .ctor
    path: src/MediatorForge/Results/Result.cs
    startLine: 31
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nInitializes a new instance of the <xref href=\"MediatorForge.Results.Result%601\" data-throw-if-not-resolved=\"false\"></xref> struct with a successful value.\n"
  example: []
  syntax:
    content: public Result(T value)
    parameters:
    - id: value
      type: '{T}'
      description: The value of the successful result.
    content.vb: Public Sub New(value As T)
  overload: MediatorForge.Results.Result`1.#ctor*
  nameWithType.vb: Result(Of T).Result(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MediatorForge.Results.Result(Of T).Result(T)
- uid: MediatorForge.Results.Result`1.#ctor(Exception)
  commentId: M:MediatorForge.Results.Result`1.#ctor(Exception)
  id: '#ctor(Exception)'
  parent: MediatorForge.Results.Result`1
  langs:
  - csharp
  - vb
  name: Result(Exception)
  nameWithType: Result<T>.Result(Exception)
  fullName: MediatorForge.Results.Result<T>.Result(Exception)
  type: Constructor
  source:
    remote:
      path: src/MediatorForge/Results/Result.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: .ctor
    path: src/MediatorForge/Results/Result.cs
    startLine: 42
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nInitializes a new instance of the <xref href=\"MediatorForge.Results.Result%601\" data-throw-if-not-resolved=\"false\"></xref> struct with a failure exception.\n"
  example: []
  syntax:
    content: public Result(Exception error)
    parameters:
    - id: error
      type: Exception
      description: The exception of the failed result.
    content.vb: Public Sub New(error As Exception)
  overload: MediatorForge.Results.Result`1.#ctor*
  nameWithType.vb: Result(Of T).Result(Exception)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MediatorForge.Results.Result(Of T).Result(Exception)
- uid: MediatorForge.Results.Result`1.Succ(`0)
  commentId: M:MediatorForge.Results.Result`1.Succ(`0)
  id: Succ(`0)
  parent: MediatorForge.Results.Result`1
  langs:
  - csharp
  - vb
  name: Succ(T)
  nameWithType: Result<T>.Succ(T)
  fullName: MediatorForge.Results.Result<T>.Succ(T)
  type: Method
  source:
    remote:
      path: src/MediatorForge/Results/Result.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: Succ
    path: src/MediatorForge/Results/Result.cs
    startLine: 54
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nCreates a successful result.\n"
  example: []
  syntax:
    content: public static Result<T> Succ(T value)
    parameters:
    - id: value
      type: '{T}'
      description: The value of the successful result.
    return:
      type: MediatorForge.Results.Result{{T}}
      description: A successful <xref href="MediatorForge.Results.Result%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function Succ(value As T) As Result(Of T)
  overload: MediatorForge.Results.Result`1.Succ*
  nameWithType.vb: Result(Of T).Succ(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MediatorForge.Results.Result(Of T).Succ(T)
- uid: MediatorForge.Results.Result`1.Fail(Exception)
  commentId: M:MediatorForge.Results.Result`1.Fail(Exception)
  id: Fail(Exception)
  parent: MediatorForge.Results.Result`1
  langs:
  - csharp
  - vb
  name: Fail(Exception)
  nameWithType: Result<T>.Fail(Exception)
  fullName: MediatorForge.Results.Result<T>.Fail(Exception)
  type: Method
  source:
    remote:
      path: src/MediatorForge/Results/Result.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: Fail
    path: src/MediatorForge/Results/Result.cs
    startLine: 61
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nCreates a failed result.\n"
  example: []
  syntax:
    content: public static Result<T> Fail(Exception error)
    parameters:
    - id: error
      type: Exception
      description: The exception of the failed result.
    return:
      type: MediatorForge.Results.Result{{T}}
      description: A failed <xref href="MediatorForge.Results.Result%601" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Shared Function Fail(error As Exception) As Result(Of T)
  overload: MediatorForge.Results.Result`1.Fail*
  nameWithType.vb: Result(Of T).Fail(Exception)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MediatorForge.Results.Result(Of T).Fail(Exception)
- uid: MediatorForge.Results.Result`1.CompareTo(MediatorForge.Results.Result{`0})
  commentId: M:MediatorForge.Results.Result`1.CompareTo(MediatorForge.Results.Result{`0})
  id: CompareTo(MediatorForge.Results.Result{`0})
  parent: MediatorForge.Results.Result`1
  langs:
  - csharp
  - vb
  name: CompareTo(Result<T>)
  nameWithType: Result<T>.CompareTo(Result<T>)
  fullName: MediatorForge.Results.Result<T>.CompareTo(MediatorForge.Results.Result<T>)
  type: Method
  source:
    remote:
      path: src/MediatorForge/Results/Result.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: CompareTo
    path: src/MediatorForge/Results/Result.cs
    startLine: 68
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nCompares this instance with another <xref href=\"MediatorForge.Results.Result%601\" data-throw-if-not-resolved=\"false\"></xref> and returns an integer that indicates whether this instance precedes, follows, or occurs in the same position in the sort order as the other <xref href=\"MediatorForge.Results.Result%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public readonly int CompareTo(Result<T> other)
    parameters:
    - id: other
      type: MediatorForge.Results.Result{{T}}
      description: A <xref href="MediatorForge.Results.Result%601" data-throw-if-not-resolved="false"></xref> to compare with this instance.
    return:
      type: System.Int32
      description: A value that indicates the relative order of the objects being compared.
    content.vb: Public Function CompareTo(other As Result(Of T)) As Integer
  overload: MediatorForge.Results.Result`1.CompareTo*
  nameWithType.vb: Result(Of T).CompareTo(Result(Of T))
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: MediatorForge.Results.Result(Of T).CompareTo(MediatorForge.Results.Result(Of T))
  name.vb: CompareTo(Result(Of T))
- uid: MediatorForge.Results.Result`1.Equals(MediatorForge.Results.Result{`0})
  commentId: M:MediatorForge.Results.Result`1.Equals(MediatorForge.Results.Result{`0})
  id: Equals(MediatorForge.Results.Result{`0})
  parent: MediatorForge.Results.Result`1
  langs:
  - csharp
  - vb
  name: Equals(Result<T>)
  nameWithType: Result<T>.Equals(Result<T>)
  fullName: MediatorForge.Results.Result<T>.Equals(MediatorForge.Results.Result<T>)
  type: Method
  source:
    remote:
      path: src/MediatorForge/Results/Result.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: Equals
    path: src/MediatorForge/Results/Result.cs
    startLine: 90
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nDetermines whether this instance and another specified <xref href=\"MediatorForge.Results.Result%601\" data-throw-if-not-resolved=\"false\"></xref> have the same value or exception.\n"
  example: []
  syntax:
    content: public readonly bool Equals(Result<T> other)
    parameters:
    - id: other
      type: MediatorForge.Results.Result{{T}}
      description: The <xref href="MediatorForge.Results.Result%601" data-throw-if-not-resolved="false"></xref> to compare to this instance.
    return:
      type: System.Boolean
      description: <code>true</code> if the value or exception of the specified <xref href="MediatorForge.Results.Result%601" data-throw-if-not-resolved="false"></xref> is equal to the value or exception of this instance; otherwise, <code>false</code>.
    content.vb: Public Function Equals(other As Result(Of T)) As Boolean
  overload: MediatorForge.Results.Result`1.Equals*
  nameWithType.vb: Result(Of T).Equals(Result(Of T))
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: MediatorForge.Results.Result(Of T).Equals(MediatorForge.Results.Result(Of T))
  name.vb: Equals(Result(Of T))
- uid: MediatorForge.Results.Result`1.Equals(System.Object)
  commentId: M:MediatorForge.Results.Result`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: MediatorForge.Results.Result`1
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Result<T>.Equals(Object)
  fullName: MediatorForge.Results.Result<T>.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/MediatorForge/Results/Result.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: Equals
    path: src/MediatorForge/Results/Result.cs
    startLine: 108
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nDetermines whether the specified object is equal to this instance.\n"
  example: []
  syntax:
    content: public override readonly bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with this instance.
    return:
      type: System.Boolean
      description: <code>true</code> if the specified object is equal to this instance; otherwise, <code>false</code>.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: MediatorForge.Results.Result`1.Equals*
  nameWithType.vb: Result(Of T).Equals(Object)
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: MediatorForge.Results.Result(Of T).Equals(System.Object)
- uid: MediatorForge.Results.Result`1.GetHashCode
  commentId: M:MediatorForge.Results.Result`1.GetHashCode
  id: GetHashCode
  parent: MediatorForge.Results.Result`1
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Result<T>.GetHashCode()
  fullName: MediatorForge.Results.Result<T>.GetHashCode()
  type: Method
  source:
    remote:
      path: src/MediatorForge/Results/Result.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: GetHashCode
    path: src/MediatorForge/Results/Result.cs
    startLine: 122
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nReturns the hash code for this instance.\n"
  example: []
  syntax:
    content: public override readonly int GetHashCode()
    return:
      type: System.Int32
      description: A hash code for the current object.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.ValueType.GetHashCode
  overload: MediatorForge.Results.Result`1.GetHashCode*
  nameWithType.vb: Result(Of T).GetHashCode()
  modifiers.csharp:
  - public
  - override
  - readonly
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: MediatorForge.Results.Result(Of T).GetHashCode()
- uid: MediatorForge.Results.Result`1.op_Implicit(`0)~MediatorForge.Results.Result{`0}
  commentId: M:MediatorForge.Results.Result`1.op_Implicit(`0)~MediatorForge.Results.Result{`0}
  id: op_Implicit(`0)~MediatorForge.Results.Result{`0}
  parent: MediatorForge.Results.Result`1
  langs:
  - csharp
  - vb
  name: Implicit(T to Result<T>)
  nameWithType: Result<T>.Implicit(T to Result<T>)
  fullName: MediatorForge.Results.Result<T>.Implicit(T to MediatorForge.Results.Result<T>)
  type: Operator
  source:
    remote:
      path: src/MediatorForge/Results/Result.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: op_Implicit
    path: src/MediatorForge/Results/Result.cs
    startLine: 131
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nImplicitly converts a value to a successful <xref href=\"MediatorForge.Results.Result%601\" data-throw-if-not-resolved=\"false\"></xref> containing that value.\n"
  example: []
  syntax:
    content: public static implicit operator Result<T>(T value)
    parameters:
    - id: value
      type: '{T}'
      description: The value to convert.
    return:
      type: MediatorForge.Results.Result{{T}}
    content.vb: Public Shared Widening Operator CType(value As T) As Result(Of T)
  overload: MediatorForge.Results.Result`1.op_Implicit*
  nameWithType.vb: Result(Of T).Widening(T to Result(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MediatorForge.Results.Result(Of T).Widening(T to MediatorForge.Results.Result(Of T))
  name.vb: Widening(T to Result(Of T))
- uid: MediatorForge.Results.Result`1.op_Implicit(Exception)~MediatorForge.Results.Result{`0}
  commentId: M:MediatorForge.Results.Result`1.op_Implicit(Exception)~MediatorForge.Results.Result{`0}
  id: op_Implicit(Exception)~MediatorForge.Results.Result{`0}
  parent: MediatorForge.Results.Result`1
  langs:
  - csharp
  - vb
  name: Implicit(Exception to Result<T>)
  nameWithType: Result<T>.Implicit(Exception to Result<T>)
  fullName: MediatorForge.Results.Result<T>.Implicit(Exception to MediatorForge.Results.Result<T>)
  type: Operator
  source:
    remote:
      path: src/MediatorForge/Results/Result.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: op_Implicit
    path: src/MediatorForge/Results/Result.cs
    startLine: 137
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nImplicitly converts an exception to a failed <xref href=\"MediatorForge.Results.Result%601\" data-throw-if-not-resolved=\"false\"></xref> containing that exception.\n"
  example: []
  syntax:
    content: public static implicit operator Result<T>(Exception error)
    parameters:
    - id: error
      type: Exception
      description: The exception to convert.
    return:
      type: MediatorForge.Results.Result{{T}}
    content.vb: Public Shared Widening Operator CType(error As Exception) As Result(Of T)
  overload: MediatorForge.Results.Result`1.op_Implicit*
  nameWithType.vb: Result(Of T).Widening(Exception to Result(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MediatorForge.Results.Result(Of T).Widening(Exception to MediatorForge.Results.Result(Of T))
  name.vb: Widening(Exception to Result(Of T))
- uid: MediatorForge.Results.Result`1.Match``1(Func{`0,``0},Func{Exception,``0})
  commentId: M:MediatorForge.Results.Result`1.Match``1(Func{`0,``0},Func{Exception,``0})
  id: Match``1(Func{`0,``0},Func{Exception,``0})
  parent: MediatorForge.Results.Result`1
  langs:
  - csharp
  - vb
  name: Match<TResult>(Func<T, TResult>, Func<Exception, TResult>)
  nameWithType: Result<T>.Match<TResult>(Func<T, TResult>, Func<Exception, TResult>)
  fullName: MediatorForge.Results.Result<T>.Match<TResult>(Func<T, TResult>, Func<Exception, TResult>)
  type: Method
  source:
    remote:
      path: src/MediatorForge/Results/Result.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: Match
    path: src/MediatorForge/Results/Result.cs
    startLine: 146
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nExecutes one of the specified functions based on whether the result is successful or failed.\n"
  example: []
  syntax:
    content: public readonly TResult Match<TResult>(Func<T, TResult> onSuccess, Func<Exception, TResult> onFailure)
    parameters:
    - id: onSuccess
      type: Func{{T},{TResult}}
      description: The function to execute if the result is successful.
    - id: onFailure
      type: Func{Exception,{TResult}}
      description: The function to execute if the result is failed.
    typeParameters:
    - id: TResult
      description: The type of the result produced by the functions.
    return:
      type: '{TResult}'
      description: The result of the executed function.
    content.vb: Public Function Match(Of TResult)(onSuccess As Func(Of T, TResult), onFailure As Func(Of Exception, TResult)) As TResult
  overload: MediatorForge.Results.Result`1.Match*
  nameWithType.vb: Result(Of T).Match(Of TResult)(Func(Of T, TResult), Func(Of Exception, TResult))
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: MediatorForge.Results.Result(Of T).Match(Of TResult)(Func(Of T, TResult), Func(Of Exception, TResult))
  name.vb: Match(Of TResult)(Func(Of T, TResult), Func(Of Exception, TResult))
- uid: MediatorForge.Results.Result`1.Match(Action{`0},Action{Exception})
  commentId: M:MediatorForge.Results.Result`1.Match(Action{`0},Action{Exception})
  id: Match(Action{`0},Action{Exception})
  parent: MediatorForge.Results.Result`1
  langs:
  - csharp
  - vb
  name: Match(Action<T>, Action<Exception>)
  nameWithType: Result<T>.Match(Action<T>, Action<Exception>)
  fullName: MediatorForge.Results.Result<T>.Match(Action<T>, Action<Exception>)
  type: Method
  source:
    remote:
      path: src/MediatorForge/Results/Result.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: Match
    path: src/MediatorForge/Results/Result.cs
    startLine: 157
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nExecutes one of the specified functions based on whether the result is successful or failed.\n"
  example: []
  syntax:
    content: public readonly void Match(Action<T> onSuccess, Action<Exception> onFailure)
    parameters:
    - id: onSuccess
      type: Action{{T}}
      description: The function to execute if the result is successful.
    - id: onFailure
      type: Action{Exception}
      description: The function to execute if the result is failed.
    content.vb: Public Sub Match(onSuccess As Action(Of T), onFailure As Action(Of Exception))
  overload: MediatorForge.Results.Result`1.Match*
  nameWithType.vb: Result(Of T).Match(Action(Of T), Action(Of Exception))
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: MediatorForge.Results.Result(Of T).Match(Action(Of T), Action(Of Exception))
  name.vb: Match(Action(Of T), Action(Of Exception))
- uid: MediatorForge.Results.Result`1.OnSuccess(Action{`0})
  commentId: M:MediatorForge.Results.Result`1.OnSuccess(Action{`0})
  id: OnSuccess(Action{`0})
  parent: MediatorForge.Results.Result`1
  langs:
  - csharp
  - vb
  name: OnSuccess(Action<T>)
  nameWithType: Result<T>.OnSuccess(Action<T>)
  fullName: MediatorForge.Results.Result<T>.OnSuccess(Action<T>)
  type: Method
  source:
    remote:
      path: src/MediatorForge/Results/Result.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: OnSuccess
    path: src/MediatorForge/Results/Result.cs
    startLine: 173
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nExecutes the specified action if the result is successful.\n"
  example: []
  syntax:
    content: public readonly void OnSuccess(Action<T> onSuccess)
    parameters:
    - id: onSuccess
      type: Action{{T}}
      description: The action to execute if the result is successful.
    content.vb: Public Sub OnSuccess(onSuccess As Action(Of T))
  overload: MediatorForge.Results.Result`1.OnSuccess*
  nameWithType.vb: Result(Of T).OnSuccess(Action(Of T))
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: MediatorForge.Results.Result(Of T).OnSuccess(Action(Of T))
  name.vb: OnSuccess(Action(Of T))
- uid: MediatorForge.Results.Result`1.OnFailure(Action{Exception})
  commentId: M:MediatorForge.Results.Result`1.OnFailure(Action{Exception})
  id: OnFailure(Action{Exception})
  parent: MediatorForge.Results.Result`1
  langs:
  - csharp
  - vb
  name: OnFailure(Action<Exception>)
  nameWithType: Result<T>.OnFailure(Action<Exception>)
  fullName: MediatorForge.Results.Result<T>.OnFailure(Action<Exception>)
  type: Method
  source:
    remote:
      path: src/MediatorForge/Results/Result.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: OnFailure
    path: src/MediatorForge/Results/Result.cs
    startLine: 185
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nExecutes the specified action if the result is failed.\n"
  example: []
  syntax:
    content: public readonly void OnFailure(Action<Exception> onFailure)
    parameters:
    - id: onFailure
      type: Action{Exception}
      description: The action to execute if the result is failed.
    content.vb: Public Sub OnFailure(onFailure As Action(Of Exception))
  overload: MediatorForge.Results.Result`1.OnFailure*
  nameWithType.vb: Result(Of T).OnFailure(Action(Of Exception))
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  fullName.vb: MediatorForge.Results.Result(Of T).OnFailure(Action(Of Exception))
  name.vb: OnFailure(Action(Of Exception))
- uid: MediatorForge.Results.Result`1.op_Equality(MediatorForge.Results.Result{`0},MediatorForge.Results.Result{`0})
  commentId: M:MediatorForge.Results.Result`1.op_Equality(MediatorForge.Results.Result{`0},MediatorForge.Results.Result{`0})
  id: op_Equality(MediatorForge.Results.Result{`0},MediatorForge.Results.Result{`0})
  parent: MediatorForge.Results.Result`1
  langs:
  - csharp
  - vb
  name: Equality(Result<T>, Result<T>)
  nameWithType: Result<T>.Equality(Result<T>, Result<T>)
  fullName: MediatorForge.Results.Result<T>.Equality(MediatorForge.Results.Result<T>, MediatorForge.Results.Result<T>)
  type: Operator
  source:
    remote:
      path: src/MediatorForge/Results/Result.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: op_Equality
    path: src/MediatorForge/Results/Result.cs
    startLine: 199
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nDetermines whether two <xref href=\"MediatorForge.Results.Result%601\" data-throw-if-not-resolved=\"false\"></xref> instances are equal.\n"
  example: []
  syntax:
    content: public static bool operator ==(Result<T> left, Result<T> right)
    parameters:
    - id: left
      type: MediatorForge.Results.Result{{T}}
      description: The first <xref href="MediatorForge.Results.Result%601" data-throw-if-not-resolved="false"></xref> to compare.
    - id: right
      type: MediatorForge.Results.Result{{T}}
      description: The second <xref href="MediatorForge.Results.Result%601" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the two <xref href="MediatorForge.Results.Result%601" data-throw-if-not-resolved="false"></xref> instances are equal; otherwise, <code>false</code>.
    content.vb: Public Shared Operator =(left As Result(Of T), right As Result(Of T)) As Boolean
  overload: MediatorForge.Results.Result`1.op_Equality*
  nameWithType.vb: Result(Of T).Equality(Result(Of T), Result(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MediatorForge.Results.Result(Of T).Equality(MediatorForge.Results.Result(Of T), MediatorForge.Results.Result(Of T))
  name.vb: Equality(Result(Of T), Result(Of T))
- uid: MediatorForge.Results.Result`1.op_Inequality(MediatorForge.Results.Result{`0},MediatorForge.Results.Result{`0})
  commentId: M:MediatorForge.Results.Result`1.op_Inequality(MediatorForge.Results.Result{`0},MediatorForge.Results.Result{`0})
  id: op_Inequality(MediatorForge.Results.Result{`0},MediatorForge.Results.Result{`0})
  parent: MediatorForge.Results.Result`1
  langs:
  - csharp
  - vb
  name: Inequality(Result<T>, Result<T>)
  nameWithType: Result<T>.Inequality(Result<T>, Result<T>)
  fullName: MediatorForge.Results.Result<T>.Inequality(MediatorForge.Results.Result<T>, MediatorForge.Results.Result<T>)
  type: Operator
  source:
    remote:
      path: src/MediatorForge/Results/Result.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: op_Inequality
    path: src/MediatorForge/Results/Result.cs
    startLine: 210
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nDetermines whether two <xref href=\"MediatorForge.Results.Result%601\" data-throw-if-not-resolved=\"false\"></xref> instances are not equal.\n"
  example: []
  syntax:
    content: public static bool operator !=(Result<T> left, Result<T> right)
    parameters:
    - id: left
      type: MediatorForge.Results.Result{{T}}
      description: The first <xref href="MediatorForge.Results.Result%601" data-throw-if-not-resolved="false"></xref> to compare.
    - id: right
      type: MediatorForge.Results.Result{{T}}
      description: The second <xref href="MediatorForge.Results.Result%601" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the two <xref href="MediatorForge.Results.Result%601" data-throw-if-not-resolved="false"></xref> instances are not equal; otherwise, <code>false</code>.
    content.vb: Public Shared Operator <>(left As Result(Of T), right As Result(Of T)) As Boolean
  overload: MediatorForge.Results.Result`1.op_Inequality*
  nameWithType.vb: Result(Of T).Inequality(Result(Of T), Result(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MediatorForge.Results.Result(Of T).Inequality(MediatorForge.Results.Result(Of T), MediatorForge.Results.Result(Of T))
  name.vb: Inequality(Result(Of T), Result(Of T))
- uid: MediatorForge.Results.Result`1.op_LessThan(MediatorForge.Results.Result{`0},MediatorForge.Results.Result{`0})
  commentId: M:MediatorForge.Results.Result`1.op_LessThan(MediatorForge.Results.Result{`0},MediatorForge.Results.Result{`0})
  id: op_LessThan(MediatorForge.Results.Result{`0},MediatorForge.Results.Result{`0})
  parent: MediatorForge.Results.Result`1
  langs:
  - csharp
  - vb
  name: LessThan(Result<T>, Result<T>)
  nameWithType: Result<T>.LessThan(Result<T>, Result<T>)
  fullName: MediatorForge.Results.Result<T>.LessThan(MediatorForge.Results.Result<T>, MediatorForge.Results.Result<T>)
  type: Operator
  source:
    remote:
      path: src/MediatorForge/Results/Result.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: op_LessThan
    path: src/MediatorForge/Results/Result.cs
    startLine: 221
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nDetermines whether one <xref href=\"MediatorForge.Results.Result%601\" data-throw-if-not-resolved=\"false\"></xref> instance precedes another in the sort order.\n"
  example: []
  syntax:
    content: public static bool operator <(Result<T> left, Result<T> right)
    parameters:
    - id: left
      type: MediatorForge.Results.Result{{T}}
      description: The first <xref href="MediatorForge.Results.Result%601" data-throw-if-not-resolved="false"></xref> to compare.
    - id: right
      type: MediatorForge.Results.Result{{T}}
      description: The second <xref href="MediatorForge.Results.Result%601" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the first <xref href="MediatorForge.Results.Result%601" data-throw-if-not-resolved="false"></xref> precedes the second in the sort order; otherwise, <code>false</code>.
    content.vb: Public Shared Operator <(left As Result(Of T), right As Result(Of T)) As Boolean
  overload: MediatorForge.Results.Result`1.op_LessThan*
  nameWithType.vb: Result(Of T).LessThan(Result(Of T), Result(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MediatorForge.Results.Result(Of T).LessThan(MediatorForge.Results.Result(Of T), MediatorForge.Results.Result(Of T))
  name.vb: LessThan(Result(Of T), Result(Of T))
- uid: MediatorForge.Results.Result`1.op_LessThanOrEqual(MediatorForge.Results.Result{`0},MediatorForge.Results.Result{`0})
  commentId: M:MediatorForge.Results.Result`1.op_LessThanOrEqual(MediatorForge.Results.Result{`0},MediatorForge.Results.Result{`0})
  id: op_LessThanOrEqual(MediatorForge.Results.Result{`0},MediatorForge.Results.Result{`0})
  parent: MediatorForge.Results.Result`1
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Result<T>, Result<T>)
  nameWithType: Result<T>.LessThanOrEqual(Result<T>, Result<T>)
  fullName: MediatorForge.Results.Result<T>.LessThanOrEqual(MediatorForge.Results.Result<T>, MediatorForge.Results.Result<T>)
  type: Operator
  source:
    remote:
      path: src/MediatorForge/Results/Result.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: op_LessThanOrEqual
    path: src/MediatorForge/Results/Result.cs
    startLine: 232
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nDetermines whether one <xref href=\"MediatorForge.Results.Result%601\" data-throw-if-not-resolved=\"false\"></xref> instance precedes or is equal to another in the sort order.\n"
  example: []
  syntax:
    content: public static bool operator <=(Result<T> left, Result<T> right)
    parameters:
    - id: left
      type: MediatorForge.Results.Result{{T}}
      description: The first <xref href="MediatorForge.Results.Result%601" data-throw-if-not-resolved="false"></xref> to compare.
    - id: right
      type: MediatorForge.Results.Result{{T}}
      description: The second <xref href="MediatorForge.Results.Result%601" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the first <xref href="MediatorForge.Results.Result%601" data-throw-if-not-resolved="false"></xref> precedes or is equal to the second in the sort order; otherwise, <code>false</code>.
    content.vb: Public Shared Operator <=(left As Result(Of T), right As Result(Of T)) As Boolean
  overload: MediatorForge.Results.Result`1.op_LessThanOrEqual*
  nameWithType.vb: Result(Of T).LessThanOrEqual(Result(Of T), Result(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MediatorForge.Results.Result(Of T).LessThanOrEqual(MediatorForge.Results.Result(Of T), MediatorForge.Results.Result(Of T))
  name.vb: LessThanOrEqual(Result(Of T), Result(Of T))
- uid: MediatorForge.Results.Result`1.op_GreaterThan(MediatorForge.Results.Result{`0},MediatorForge.Results.Result{`0})
  commentId: M:MediatorForge.Results.Result`1.op_GreaterThan(MediatorForge.Results.Result{`0},MediatorForge.Results.Result{`0})
  id: op_GreaterThan(MediatorForge.Results.Result{`0},MediatorForge.Results.Result{`0})
  parent: MediatorForge.Results.Result`1
  langs:
  - csharp
  - vb
  name: GreaterThan(Result<T>, Result<T>)
  nameWithType: Result<T>.GreaterThan(Result<T>, Result<T>)
  fullName: MediatorForge.Results.Result<T>.GreaterThan(MediatorForge.Results.Result<T>, MediatorForge.Results.Result<T>)
  type: Operator
  source:
    remote:
      path: src/MediatorForge/Results/Result.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: op_GreaterThan
    path: src/MediatorForge/Results/Result.cs
    startLine: 243
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nDetermines whether one <xref href=\"MediatorForge.Results.Result%601\" data-throw-if-not-resolved=\"false\"></xref> instance follows another in the sort order.\n"
  example: []
  syntax:
    content: public static bool operator>(Result<T> left, Result<T> right)
    parameters:
    - id: left
      type: MediatorForge.Results.Result{{T}}
      description: The first <xref href="MediatorForge.Results.Result%601" data-throw-if-not-resolved="false"></xref> to compare.
    - id: right
      type: MediatorForge.Results.Result{{T}}
      description: The second <xref href="MediatorForge.Results.Result%601" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the first <xref href="MediatorForge.Results.Result%601" data-throw-if-not-resolved="false"></xref> follows the second in the sort order; otherwise, <code>false</code>.
    content.vb: Public Shared Operator>(left As Result(Of T), right As Result(Of T)) As Boolean
  overload: MediatorForge.Results.Result`1.op_GreaterThan*
  nameWithType.vb: Result(Of T).GreaterThan(Result(Of T), Result(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MediatorForge.Results.Result(Of T).GreaterThan(MediatorForge.Results.Result(Of T), MediatorForge.Results.Result(Of T))
  name.vb: GreaterThan(Result(Of T), Result(Of T))
- uid: MediatorForge.Results.Result`1.op_GreaterThanOrEqual(MediatorForge.Results.Result{`0},MediatorForge.Results.Result{`0})
  commentId: M:MediatorForge.Results.Result`1.op_GreaterThanOrEqual(MediatorForge.Results.Result{`0},MediatorForge.Results.Result{`0})
  id: op_GreaterThanOrEqual(MediatorForge.Results.Result{`0},MediatorForge.Results.Result{`0})
  parent: MediatorForge.Results.Result`1
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Result<T>, Result<T>)
  nameWithType: Result<T>.GreaterThanOrEqual(Result<T>, Result<T>)
  fullName: MediatorForge.Results.Result<T>.GreaterThanOrEqual(MediatorForge.Results.Result<T>, MediatorForge.Results.Result<T>)
  type: Operator
  source:
    remote:
      path: src/MediatorForge/Results/Result.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: op_GreaterThanOrEqual
    path: src/MediatorForge/Results/Result.cs
    startLine: 254
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nDetermines whether one <xref href=\"MediatorForge.Results.Result%601\" data-throw-if-not-resolved=\"false\"></xref> instance follows or is equal to another in the sort order.\n"
  example: []
  syntax:
    content: public static bool operator >=(Result<T> left, Result<T> right)
    parameters:
    - id: left
      type: MediatorForge.Results.Result{{T}}
      description: The first <xref href="MediatorForge.Results.Result%601" data-throw-if-not-resolved="false"></xref> to compare.
    - id: right
      type: MediatorForge.Results.Result{{T}}
      description: The second <xref href="MediatorForge.Results.Result%601" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the first <xref href="MediatorForge.Results.Result%601" data-throw-if-not-resolved="false"></xref> follows or is equal to the second in the sort order; otherwise, <code>false</code>.
    content.vb: Public Shared Operator >=(left As Result(Of T), right As Result(Of T)) As Boolean
  overload: MediatorForge.Results.Result`1.op_GreaterThanOrEqual*
  nameWithType.vb: Result(Of T).GreaterThanOrEqual(Result(Of T), Result(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MediatorForge.Results.Result(Of T).GreaterThanOrEqual(MediatorForge.Results.Result(Of T), MediatorForge.Results.Result(Of T))
  name.vb: GreaterThanOrEqual(Result(Of T), Result(Of T))
references:
- uid: MediatorForge.Results
  commentId: N:MediatorForge.Results
  name: MediatorForge.Results
  nameWithType: MediatorForge.Results
  fullName: MediatorForge.Results
- uid: IEquatable{MediatorForge.Results.Result{{T}}}
  commentId: '!:IEquatable{MediatorForge.Results.Result{`0}}'
  definition: IEquatable`1
  name: IEquatable<Result<T>>
  nameWithType: IEquatable<Result<T>>
  fullName: IEquatable<MediatorForge.Results.Result<T>>
  nameWithType.vb: IEquatable(Of Result(Of T))
  fullName.vb: IEquatable(Of MediatorForge.Results.Result(Of T))
  name.vb: IEquatable(Of Result(Of T))
  spec.csharp:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MediatorForge.Results.Result`1
    name: Result
    nameWithType: Result
    fullName: MediatorForge.Results.Result
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MediatorForge.Results.Result`1
    name: Result
    nameWithType: Result
    fullName: MediatorForge.Results.Result
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: IComparable{MediatorForge.Results.Result{{T}}}
  commentId: '!:IComparable{MediatorForge.Results.Result{`0}}'
  definition: IComparable`1
  name: IComparable<Result<T>>
  nameWithType: IComparable<Result<T>>
  fullName: IComparable<MediatorForge.Results.Result<T>>
  nameWithType.vb: IComparable(Of Result(Of T))
  fullName.vb: IComparable(Of MediatorForge.Results.Result(Of T))
  name.vb: IComparable(Of Result(Of T))
  spec.csharp:
  - uid: IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MediatorForge.Results.Result`1
    name: Result
    nameWithType: Result
    fullName: MediatorForge.Results.Result
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MediatorForge.Results.Result`1
    name: Result
    nameWithType: Result
    fullName: MediatorForge.Results.Result
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEquatable`1
  isExternal: true
  name: IEquatable<>
  nameWithType: IEquatable<>
  fullName: IEquatable<>
  nameWithType.vb: IEquatable(Of )
  fullName.vb: IEquatable(Of )
  name.vb: IEquatable(Of )
  spec.csharp:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IComparable`1
  isExternal: true
  name: IComparable<>
  nameWithType: IComparable<>
  fullName: IComparable<>
  nameWithType.vb: IComparable(Of )
  fullName.vb: IComparable(Of )
  name.vb: IComparable(Of )
  spec.csharp:
  - uid: IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MediatorForge.Results.Result`1.IsSuccess*
  commentId: Overload:MediatorForge.Results.Result`1.IsSuccess
  name: IsSuccess
  nameWithType: Result<T>.IsSuccess
  fullName: MediatorForge.Results.Result<T>.IsSuccess
  nameWithType.vb: Result(Of T).IsSuccess
  fullName.vb: MediatorForge.Results.Result(Of T).IsSuccess
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: MediatorForge.Results.Result`1.Value*
  commentId: Overload:MediatorForge.Results.Result`1.Value
  name: Value
  nameWithType: Result<T>.Value
  fullName: MediatorForge.Results.Result<T>.Value
  nameWithType.vb: Result(Of T).Value
  fullName.vb: MediatorForge.Results.Result(Of T).Value
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: MediatorForge.Results.Result`1.Exception*
  commentId: Overload:MediatorForge.Results.Result`1.Exception
  name: Exception
  nameWithType: Result<T>.Exception
  fullName: MediatorForge.Results.Result<T>.Exception
  nameWithType.vb: Result(Of T).Exception
  fullName.vb: MediatorForge.Results.Result(Of T).Exception
- uid: System.Nullable{Exception}
  commentId: T:System.Nullable{Exception}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Exception>
  nameWithType: Nullable<Exception>
  fullName: System.Nullable<Exception>
  nameWithType.vb: Nullable(Of Exception)
  fullName.vb: System.Nullable(Of Exception)
  name.vb: Nullable(Of Exception)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatorForge.Results.Result`1
  commentId: T:MediatorForge.Results.Result`1
  name: Result<T>
  nameWithType: Result<T>
  fullName: MediatorForge.Results.Result<T>
  nameWithType.vb: Result(Of T)
  fullName.vb: MediatorForge.Results.Result(Of T)
  name.vb: Result(Of T)
  spec.csharp:
  - uid: MediatorForge.Results.Result`1
    name: Result
    nameWithType: Result
    fullName: MediatorForge.Results.Result
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MediatorForge.Results.Result`1
    name: Result
    nameWithType: Result
    fullName: MediatorForge.Results.Result
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatorForge.Results.Result`1.#ctor*
  commentId: Overload:MediatorForge.Results.Result`1.#ctor
  name: Result
  nameWithType: Result<T>.Result
  fullName: MediatorForge.Results.Result<T>.Result
  nameWithType.vb: Result(Of T).Result
  fullName.vb: MediatorForge.Results.Result(Of T).Result
- uid: Exception
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: Exception
- uid: MediatorForge.Results.Result`1.Succ*
  commentId: Overload:MediatorForge.Results.Result`1.Succ
  name: Succ
  nameWithType: Result<T>.Succ
  fullName: MediatorForge.Results.Result<T>.Succ
  nameWithType.vb: Result(Of T).Succ
  fullName.vb: MediatorForge.Results.Result(Of T).Succ
- uid: MediatorForge.Results.Result{{T}}
  commentId: T:MediatorForge.Results.Result{`0}
  parent: MediatorForge.Results
  definition: MediatorForge.Results.Result`1
  name: Result<T>
  nameWithType: Result<T>
  fullName: MediatorForge.Results.Result<T>
  nameWithType.vb: Result(Of T)
  fullName.vb: MediatorForge.Results.Result(Of T)
  name.vb: Result(Of T)
  spec.csharp:
  - uid: MediatorForge.Results.Result`1
    name: Result
    nameWithType: Result
    fullName: MediatorForge.Results.Result
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MediatorForge.Results.Result`1
    name: Result
    nameWithType: Result
    fullName: MediatorForge.Results.Result
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatorForge.Results.Result`1.Fail*
  commentId: Overload:MediatorForge.Results.Result`1.Fail
  name: Fail
  nameWithType: Result<T>.Fail
  fullName: MediatorForge.Results.Result<T>.Fail
  nameWithType.vb: Result(Of T).Fail
  fullName.vb: MediatorForge.Results.Result(Of T).Fail
- uid: MediatorForge.Results.Result`1.CompareTo*
  commentId: Overload:MediatorForge.Results.Result`1.CompareTo
  name: CompareTo
  nameWithType: Result<T>.CompareTo
  fullName: MediatorForge.Results.Result<T>.CompareTo
  nameWithType.vb: Result(Of T).CompareTo
  fullName.vb: MediatorForge.Results.Result(Of T).CompareTo
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: MediatorForge.Results.Result`1.Equals*
  commentId: Overload:MediatorForge.Results.Result`1.Equals
  name: Equals
  nameWithType: Result<T>.Equals
  fullName: MediatorForge.Results.Result<T>.Equals
  nameWithType.vb: Result(Of T).Equals
  fullName.vb: MediatorForge.Results.Result(Of T).Equals
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatorForge.Results.Result`1.GetHashCode*
  commentId: Overload:MediatorForge.Results.Result`1.GetHashCode
  name: GetHashCode
  nameWithType: Result<T>.GetHashCode
  fullName: MediatorForge.Results.Result<T>.GetHashCode
  nameWithType.vb: Result(Of T).GetHashCode
  fullName.vb: MediatorForge.Results.Result(Of T).GetHashCode
- uid: MediatorForge.Results.Result`1.op_Implicit*
  commentId: Overload:MediatorForge.Results.Result`1.op_Implicit
  name: Implicit
  nameWithType: Result<T>.Implicit
  fullName: MediatorForge.Results.Result<T>.Implicit
  nameWithType.vb: Result(Of T).Widening
  fullName.vb: MediatorForge.Results.Result(Of T).Widening
  name.vb: Widening
- uid: MediatorForge.Results.Result`1.Match*
  commentId: Overload:MediatorForge.Results.Result`1.Match
  name: Match
  nameWithType: Result<T>.Match
  fullName: MediatorForge.Results.Result<T>.Match
  nameWithType.vb: Result(Of T).Match
  fullName.vb: MediatorForge.Results.Result(Of T).Match
- uid: Func{{T},{TResult}}
  commentId: '!:Func{`0,``0}'
  definition: Func`2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Func{Exception,{TResult}}
  commentId: '!:Func{Exception,``0}'
  definition: Func`2
  name: Func<Exception, TResult>
  nameWithType: Func<Exception, TResult>
  fullName: Func<Exception, TResult>
  nameWithType.vb: Func(Of Exception, TResult)
  fullName.vb: Func(Of Exception, TResult)
  name.vb: Func(Of Exception, TResult)
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Func`2
  isExternal: true
  name: Func<, >
  nameWithType: Func<, >
  fullName: Func<, >
  nameWithType.vb: Func(Of , )
  fullName.vb: Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`2
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Action{{T}}
  commentId: '!:Action{`0}'
  definition: Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Action{Exception}
  commentId: '!:Action{Exception}'
  definition: Action`1
  name: Action<Exception>
  nameWithType: Action<Exception>
  fullName: Action<Exception>
  nameWithType.vb: Action(Of Exception)
  fullName.vb: Action(Of Exception)
  name.vb: Action(Of Exception)
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Action`1
  isExternal: true
  name: Action<>
  nameWithType: Action<>
  fullName: Action<>
  nameWithType.vb: Action(Of )
  fullName.vb: Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Action`1
    name: Action
    nameWithType: Action
    fullName: Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatorForge.Results.Result`1.OnSuccess*
  commentId: Overload:MediatorForge.Results.Result`1.OnSuccess
  name: OnSuccess
  nameWithType: Result<T>.OnSuccess
  fullName: MediatorForge.Results.Result<T>.OnSuccess
  nameWithType.vb: Result(Of T).OnSuccess
  fullName.vb: MediatorForge.Results.Result(Of T).OnSuccess
- uid: MediatorForge.Results.Result`1.OnFailure*
  commentId: Overload:MediatorForge.Results.Result`1.OnFailure
  name: OnFailure
  nameWithType: Result<T>.OnFailure
  fullName: MediatorForge.Results.Result<T>.OnFailure
  nameWithType.vb: Result(Of T).OnFailure
  fullName.vb: MediatorForge.Results.Result(Of T).OnFailure
- uid: MediatorForge.Results.Result`1.op_Equality*
  commentId: Overload:MediatorForge.Results.Result`1.op_Equality
  name: Equality
  nameWithType: Result<T>.Equality
  fullName: MediatorForge.Results.Result<T>.Equality
  nameWithType.vb: Result(Of T).Equality
  fullName.vb: MediatorForge.Results.Result(Of T).Equality
- uid: MediatorForge.Results.Result`1.op_Inequality*
  commentId: Overload:MediatorForge.Results.Result`1.op_Inequality
  name: Inequality
  nameWithType: Result<T>.Inequality
  fullName: MediatorForge.Results.Result<T>.Inequality
  nameWithType.vb: Result(Of T).Inequality
  fullName.vb: MediatorForge.Results.Result(Of T).Inequality
- uid: MediatorForge.Results.Result`1.op_LessThan*
  commentId: Overload:MediatorForge.Results.Result`1.op_LessThan
  name: LessThan
  nameWithType: Result<T>.LessThan
  fullName: MediatorForge.Results.Result<T>.LessThan
  nameWithType.vb: Result(Of T).LessThan
  fullName.vb: MediatorForge.Results.Result(Of T).LessThan
- uid: MediatorForge.Results.Result`1.op_LessThanOrEqual*
  commentId: Overload:MediatorForge.Results.Result`1.op_LessThanOrEqual
  name: LessThanOrEqual
  nameWithType: Result<T>.LessThanOrEqual
  fullName: MediatorForge.Results.Result<T>.LessThanOrEqual
  nameWithType.vb: Result(Of T).LessThanOrEqual
  fullName.vb: MediatorForge.Results.Result(Of T).LessThanOrEqual
- uid: MediatorForge.Results.Result`1.op_GreaterThan*
  commentId: Overload:MediatorForge.Results.Result`1.op_GreaterThan
  name: GreaterThan
  nameWithType: Result<T>.GreaterThan
  fullName: MediatorForge.Results.Result<T>.GreaterThan
  nameWithType.vb: Result(Of T).GreaterThan
  fullName.vb: MediatorForge.Results.Result(Of T).GreaterThan
- uid: MediatorForge.Results.Result`1.op_GreaterThanOrEqual*
  commentId: Overload:MediatorForge.Results.Result`1.op_GreaterThanOrEqual
  name: GreaterThanOrEqual
  nameWithType: Result<T>.GreaterThanOrEqual
  fullName: MediatorForge.Results.Result<T>.GreaterThanOrEqual
  nameWithType.vb: Result(Of T).GreaterThanOrEqual
  fullName.vb: MediatorForge.Results.Result(Of T).GreaterThanOrEqual
