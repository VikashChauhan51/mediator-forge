### YamlMime:ManagedReference
items:
- uid: MediatorForge.Results.Option
  commentId: T:MediatorForge.Results.Option
  id: Option
  parent: MediatorForge.Results
  children:
  - MediatorForge.Results.Option.None``1
  - MediatorForge.Results.Option.Some``1(``0)
  langs:
  - csharp
  - vb
  name: Option
  nameWithType: Option
  fullName: MediatorForge.Results.Option
  type: Class
  source:
    remote:
      path: src/MediatorForge/Results/Option.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: Option
    path: src/MediatorForge/Results/Option.cs
    startLine: 230
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nProvides helper methods for creating instances of <xref href=\"MediatorForge.Results.Option%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static class Option
    content.vb: Public Module Option
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: MediatorForge.Results.Option.Some``1(``0)
  commentId: M:MediatorForge.Results.Option.Some``1(``0)
  id: Some``1(``0)
  parent: MediatorForge.Results.Option
  langs:
  - csharp
  - vb
  name: Some<T>(T)
  nameWithType: Option.Some<T>(T)
  fullName: MediatorForge.Results.Option.Some<T>(T)
  type: Method
  source:
    remote:
      path: src/MediatorForge/Results/Option.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: Some
    path: src/MediatorForge/Results/Option.cs
    startLine: 238
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nCreates an instance of <xref href=\"MediatorForge.Results.Option%601\" data-throw-if-not-resolved=\"false\"></xref> that contains a value.\n"
  example: []
  syntax:
    content: public static Option<T> Some<T>(T value)
    parameters:
    - id: value
      type: '{T}'
      description: The value to be contained.
    typeParameters:
    - id: T
      description: The type of the value.
    return:
      type: MediatorForge.Results.Option{{T}}
      description: An <xref href="MediatorForge.Results.Option%601" data-throw-if-not-resolved="false"></xref> containing the specified value.
    content.vb: 'Public Shared Function Some(Of T)(value As T) As '
  overload: MediatorForge.Results.Option.Some*
  nameWithType.vb: Option.Some(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MediatorForge.Results.Option.Some(Of T)(T)
  name.vb: Some(Of T)(T)
- uid: MediatorForge.Results.Option.None``1
  commentId: M:MediatorForge.Results.Option.None``1
  id: None``1
  parent: MediatorForge.Results.Option
  langs:
  - csharp
  - vb
  name: None<T>()
  nameWithType: Option.None<T>()
  fullName: MediatorForge.Results.Option.None<T>()
  type: Method
  source:
    remote:
      path: src/MediatorForge/Results/Option.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: None
    path: src/MediatorForge/Results/Option.cs
    startLine: 245
  assemblies:
  - MediatorForge
  namespace: MediatorForge.Results
  summary: "\nGets an instance of <xref href=\"MediatorForge.Results.Option%601\" data-throw-if-not-resolved=\"false\"></xref> that represents no value.\n"
  example: []
  syntax:
    content: public static Option<T> None<T>()
    typeParameters:
    - id: T
      description: The type of the value.
    return:
      type: MediatorForge.Results.Option{{T}}
      description: An <xref href="MediatorForge.Results.Option%601" data-throw-if-not-resolved="false"></xref> that represents no value.
    content.vb: 'Public Shared Function None(Of T) As '
  overload: MediatorForge.Results.Option.None*
  nameWithType.vb: Option.None(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: MediatorForge.Results.Option.None(Of T)()
  name.vb: None(Of T)()
references:
- uid: MediatorForge.Results.Option`1
  commentId: T:MediatorForge.Results.Option`1
  name: Option<T>
  nameWithType: Option<T>
  fullName: MediatorForge.Results.Option<T>
  nameWithType.vb: Option(Of T)
  fullName.vb: MediatorForge.Results.Option(Of T)
  name.vb: Option(Of T)
  spec.csharp:
  - uid: MediatorForge.Results.Option`1
    name: Option
    nameWithType: Option
    fullName: MediatorForge.Results.Option
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MediatorForge.Results.Option`1
    name: Option
    nameWithType: Option
    fullName: MediatorForge.Results.Option
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatorForge.Results
  commentId: N:MediatorForge.Results
  name: MediatorForge.Results
  nameWithType: MediatorForge.Results
  fullName: MediatorForge.Results
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MediatorForge.Results.Option.Some*
  commentId: Overload:MediatorForge.Results.Option.Some
  name: Some
  nameWithType: Option.Some
  fullName: MediatorForge.Results.Option.Some
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: MediatorForge.Results.Option{{T}}
  commentId: T:MediatorForge.Results.Option{`0}
  parent: MediatorForge.Results
  definition: MediatorForge.Results.Option`1
  name: Option<T>
  nameWithType: Option<T>
  fullName: MediatorForge.Results.Option<T>
  nameWithType.vb: Option(Of T)
  fullName.vb: MediatorForge.Results.Option(Of T)
  name.vb: Option(Of T)
  spec.csharp:
  - uid: MediatorForge.Results.Option`1
    name: Option
    nameWithType: Option
    fullName: MediatorForge.Results.Option
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: MediatorForge.Results.Option`1
    name: Option
    nameWithType: Option
    fullName: MediatorForge.Results.Option
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: MediatorForge.Results.Option.None*
  commentId: Overload:MediatorForge.Results.Option.None
  name: None
  nameWithType: Option.None
  fullName: MediatorForge.Results.Option.None
