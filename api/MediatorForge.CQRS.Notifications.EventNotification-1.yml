### YamlMime:ManagedReference
items:
- uid: MediatorForge.CQRS.Notifications.EventNotification`1
  commentId: T:MediatorForge.CQRS.Notifications.EventNotification`1
  id: EventNotification`1
  parent: MediatorForge.CQRS.Notifications
  children:
  - MediatorForge.CQRS.Notifications.EventNotification`1.#ctor(`0)
  - MediatorForge.CQRS.Notifications.EventNotification`1.Event
  langs:
  - csharp
  - vb
  name: EventNotification<TEvent>
  nameWithType: EventNotification<TEvent>
  fullName: MediatorForge.CQRS.Notifications.EventNotification<TEvent>
  type: Class
  source:
    remote:
      path: src/MediatorForge/CQRS/Notifications/EventNotification.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: EventNotification
    path: src/MediatorForge/CQRS/Notifications/EventNotification.cs
    startLine: 9
  assemblies:
  - MediatorForge
  namespace: MediatorForge.CQRS.Notifications
  summary: "\nThe generic implementation of event notification.\n"
  example: []
  syntax:
    content: 'public class EventNotification<TEvent> : INotification, IEquatable<EventNotification<TEvent>>'
    typeParameters:
    - id: TEvent
      description: The event type of <see cref="!:TEvent"></see>.
    content.vb: >-
      Public Class EventNotification(Of TEvent)

          Implements INotification, IEquatable(Of EventNotification(Of TEvent))
  inheritance:
  - System.Object
  implements:
  - MediatR.INotification
  - System.IEquatable{MediatorForge.CQRS.Notifications.EventNotification`1}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: EventNotification(Of TEvent)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: MediatorForge.CQRS.Notifications.EventNotification(Of TEvent)
  name.vb: EventNotification(Of TEvent)
- uid: MediatorForge.CQRS.Notifications.EventNotification`1.#ctor(`0)
  commentId: M:MediatorForge.CQRS.Notifications.EventNotification`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: MediatorForge.CQRS.Notifications.EventNotification`1
  langs:
  - csharp
  - vb
  name: EventNotification(TEvent)
  nameWithType: EventNotification<TEvent>.EventNotification(TEvent)
  fullName: MediatorForge.CQRS.Notifications.EventNotification<TEvent>.EventNotification(TEvent)
  type: Constructor
  source:
    remote:
      path: src/MediatorForge/CQRS/Notifications/EventNotification.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: .ctor
    path: src/MediatorForge/CQRS/Notifications/EventNotification.cs
    startLine: 9
  assemblies:
  - MediatorForge
  namespace: MediatorForge.CQRS.Notifications
  summary: "\nThe generic implementation of event notification.\n"
  example: []
  syntax:
    content: public EventNotification(TEvent Event)
    parameters:
    - id: Event
      type: '{TEvent}'
      description: The event data <see cref="!:TEvent"></see>.
    content.vb: Public Sub New(Event As TEvent)
  overload: MediatorForge.CQRS.Notifications.EventNotification`1.#ctor*
  nameWithType.vb: EventNotification(Of TEvent).EventNotification(TEvent)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: MediatorForge.CQRS.Notifications.EventNotification(Of TEvent).EventNotification(TEvent)
- uid: MediatorForge.CQRS.Notifications.EventNotification`1.Event
  commentId: P:MediatorForge.CQRS.Notifications.EventNotification`1.Event
  id: Event
  parent: MediatorForge.CQRS.Notifications.EventNotification`1
  langs:
  - csharp
  - vb
  name: Event
  nameWithType: EventNotification<TEvent>.Event
  fullName: MediatorForge.CQRS.Notifications.EventNotification<TEvent>.Event
  type: Property
  source:
    remote:
      path: src/MediatorForge/CQRS/Notifications/EventNotification.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: Event
    path: src/MediatorForge/CQRS/Notifications/EventNotification.cs
    startLine: 11
  assemblies:
  - MediatorForge
  namespace: MediatorForge.CQRS.Notifications
  syntax:
    content: public TEvent Event { get; set; }
    parameters: []
    return:
      type: '{TEvent}'
    content.vb: Public Property Event As TEvent
  overload: MediatorForge.CQRS.Notifications.EventNotification`1.Event*
  nameWithType.vb: EventNotification(Of TEvent).Event
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: MediatorForge.CQRS.Notifications.EventNotification(Of TEvent).Event
references:
- uid: MediatorForge.CQRS.Notifications
  commentId: N:MediatorForge.CQRS.Notifications
  name: MediatorForge.CQRS.Notifications
  nameWithType: MediatorForge.CQRS.Notifications
  fullName: MediatorForge.CQRS.Notifications
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: MediatR.INotification
  commentId: T:MediatR.INotification
  parent: MediatR
  isExternal: true
  name: INotification
  nameWithType: INotification
  fullName: MediatR.INotification
- uid: System.IEquatable{MediatorForge.CQRS.Notifications.EventNotification`1}
  commentId: T:System.IEquatable{MediatorForge.CQRS.Notifications.EventNotification`1}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<EventNotification<TEvent>>
  nameWithType: IEquatable<EventNotification<TEvent>>
  fullName: System.IEquatable<MediatorForge.CQRS.Notifications.EventNotification<TEvent>>
  nameWithType.vb: IEquatable(Of EventNotification(Of TEvent))
  fullName.vb: System.IEquatable(Of MediatorForge.CQRS.Notifications.EventNotification(Of TEvent))
  name.vb: IEquatable(Of EventNotification(Of TEvent))
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MediatorForge.CQRS.Notifications.EventNotification`1
    name: EventNotification
    nameWithType: EventNotification
    fullName: MediatorForge.CQRS.Notifications.EventNotification
  - name: <
    nameWithType: <
    fullName: <
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MediatorForge.CQRS.Notifications.EventNotification`1
    name: EventNotification
    nameWithType: EventNotification
    fullName: MediatorForge.CQRS.Notifications.EventNotification
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEvent
    nameWithType: TEvent
    fullName: TEvent
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: MediatR
  commentId: N:MediatR
  isExternal: true
  name: MediatR
  nameWithType: MediatR
  fullName: MediatR
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatorForge.CQRS.Notifications.EventNotification`1.#ctor*
  commentId: Overload:MediatorForge.CQRS.Notifications.EventNotification`1.#ctor
  name: EventNotification
  nameWithType: EventNotification<TEvent>.EventNotification
  fullName: MediatorForge.CQRS.Notifications.EventNotification<TEvent>.EventNotification
  nameWithType.vb: EventNotification(Of TEvent).EventNotification
  fullName.vb: MediatorForge.CQRS.Notifications.EventNotification(Of TEvent).EventNotification
- uid: '{TEvent}'
  commentId: '!:TEvent'
  definition: TEvent
  name: TEvent
  nameWithType: TEvent
  fullName: TEvent
- uid: TEvent
  name: TEvent
  nameWithType: TEvent
  fullName: TEvent
- uid: MediatorForge.CQRS.Notifications.EventNotification`1.Event*
  commentId: Overload:MediatorForge.CQRS.Notifications.EventNotification`1.Event
  name: Event
  nameWithType: EventNotification<TEvent>.Event
  fullName: MediatorForge.CQRS.Notifications.EventNotification<TEvent>.Event
  nameWithType.vb: EventNotification(Of TEvent).Event
  fullName.vb: MediatorForge.CQRS.Notifications.EventNotification(Of TEvent).Event
