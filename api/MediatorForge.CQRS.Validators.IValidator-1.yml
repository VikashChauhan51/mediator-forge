### YamlMime:ManagedReference
items:
- uid: MediatorForge.CQRS.Validators.IValidator`1
  commentId: T:MediatorForge.CQRS.Validators.IValidator`1
  id: IValidator`1
  parent: MediatorForge.CQRS.Validators
  children:
  - MediatorForge.CQRS.Validators.IValidator`1.ValidateAsync(`0,CancellationToken)
  langs:
  - csharp
  - vb
  name: IValidator<TRequest>
  nameWithType: IValidator<TRequest>
  fullName: MediatorForge.CQRS.Validators.IValidator<TRequest>
  type: Interface
  source:
    remote:
      path: src/MediatorForge/CQRS/Validators/IValidator.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: IValidator
    path: src/MediatorForge/CQRS/Validators/IValidator.cs
    startLine: 9
  assemblies:
  - MediatorForge
  namespace: MediatorForge.CQRS.Validators
  summary: "\nDefines a contract for validating a specific request.\n"
  example: []
  syntax:
    content: public interface IValidator<in TRequest>
    typeParameters:
    - id: TRequest
      description: The type of the request to validate.
    content.vb: Public Interface IValidator(Of In TRequest)
  nameWithType.vb: IValidator(Of TRequest)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: MediatorForge.CQRS.Validators.IValidator(Of TRequest)
  name.vb: IValidator(Of TRequest)
- uid: MediatorForge.CQRS.Validators.IValidator`1.ValidateAsync(`0,CancellationToken)
  commentId: M:MediatorForge.CQRS.Validators.IValidator`1.ValidateAsync(`0,CancellationToken)
  id: ValidateAsync(`0,CancellationToken)
  parent: MediatorForge.CQRS.Validators.IValidator`1
  langs:
  - csharp
  - vb
  name: ValidateAsync(TRequest, CancellationToken)
  nameWithType: IValidator<TRequest>.ValidateAsync(TRequest, CancellationToken)
  fullName: MediatorForge.CQRS.Validators.IValidator<TRequest>.ValidateAsync(TRequest, CancellationToken)
  type: Method
  source:
    remote:
      path: src/MediatorForge/CQRS/Validators/IValidator.cs
      branch: main
      repo: https://github.com/VikashChauhan51/mediator-forge.git
    id: ValidateAsync
    path: src/MediatorForge/CQRS/Validators/IValidator.cs
    startLine: 17
  assemblies:
  - MediatorForge
  namespace: MediatorForge.CQRS.Validators
  summary: "\nAsynchronously validates the specified request.\n"
  example: []
  syntax:
    content: Task<ValidationResult> ValidateAsync(TRequest request, CancellationToken cancellationToken = null)
    parameters:
    - id: request
      type: '{TRequest}'
      description: The request to validate.
    - id: cancellationToken
      type: CancellationToken
      description: The request cancellation token.
    return:
      type: Task{MediatorForge.Utilities.ValidationResult}
      description: A task that represents the asynchronous validation operation. The task result contains the <xref href="MediatorForge.Utilities.ValidationResult" data-throw-if-not-resolved="false"></xref>.
    content.vb: Function ValidateAsync(request As TRequest, cancellationToken As CancellationToken = Nothing) As Task(Of ValidationResult)
  overload: MediatorForge.CQRS.Validators.IValidator`1.ValidateAsync*
  nameWithType.vb: IValidator(Of TRequest).ValidateAsync(TRequest, CancellationToken)
  fullName.vb: MediatorForge.CQRS.Validators.IValidator(Of TRequest).ValidateAsync(TRequest, CancellationToken)
references:
- uid: MediatorForge.CQRS.Validators
  commentId: N:MediatorForge.CQRS.Validators
  name: MediatorForge.CQRS.Validators
  nameWithType: MediatorForge.CQRS.Validators
  fullName: MediatorForge.CQRS.Validators
- uid: MediatorForge.Utilities.ValidationResult
  commentId: T:MediatorForge.Utilities.ValidationResult
  parent: MediatorForge.Utilities
  name: ValidationResult
  nameWithType: ValidationResult
  fullName: MediatorForge.Utilities.ValidationResult
- uid: MediatorForge.CQRS.Validators.IValidator`1.ValidateAsync*
  commentId: Overload:MediatorForge.CQRS.Validators.IValidator`1.ValidateAsync
  name: ValidateAsync
  nameWithType: IValidator<TRequest>.ValidateAsync
  fullName: MediatorForge.CQRS.Validators.IValidator<TRequest>.ValidateAsync
  nameWithType.vb: IValidator(Of TRequest).ValidateAsync
  fullName.vb: MediatorForge.CQRS.Validators.IValidator(Of TRequest).ValidateAsync
- uid: '{TRequest}'
  commentId: '!:TRequest'
  definition: TRequest
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: CancellationToken
- uid: Task{MediatorForge.Utilities.ValidationResult}
  commentId: '!:Task{MediatorForge.Utilities.ValidationResult}'
  definition: Task`1
  name: Task<ValidationResult>
  nameWithType: Task<ValidationResult>
  fullName: Task<MediatorForge.Utilities.ValidationResult>
  nameWithType.vb: Task(Of ValidationResult)
  fullName.vb: Task(Of MediatorForge.Utilities.ValidationResult)
  name.vb: Task(Of ValidationResult)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: MediatorForge.Utilities.ValidationResult
    name: ValidationResult
    nameWithType: ValidationResult
    fullName: MediatorForge.Utilities.ValidationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: MediatorForge.Utilities.ValidationResult
    name: ValidationResult
    nameWithType: ValidationResult
    fullName: MediatorForge.Utilities.ValidationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: MediatorForge.Utilities
  commentId: N:MediatorForge.Utilities
  name: MediatorForge.Utilities
  nameWithType: MediatorForge.Utilities
  fullName: MediatorForge.Utilities
- uid: TRequest
  name: TRequest
  nameWithType: TRequest
  fullName: TRequest
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
